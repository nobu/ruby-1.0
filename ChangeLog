Wed Feb  1 19:48:24 1995  Yukihiro Matsumoto  (matz@ix-02)

	* string.c(str_replace): 置き換える文字列の長さが等しい時メモリコ
	  ピーをしない．

	* string.c(rindex): バグ修正．

Mon Jan 30 11:23:05 1995  Yukihiro Matsumoto  (matz@ix-02)

	* parse.y(value_expr): ifのチェックを追加．

	* gc.c(gc_mark): free cellの扱いにバグ．

	* parse.y: 文法の変更(よりシンプルに)．例外を減らした．

Thu Jan 26 00:52:55 1995  Yukihiro Matsumoto  (matz@dyna)

	* parse.y: 引数として連想配列を置くことができるように．この場合，
	  連想配列リテラルが最終引数となる．

	* parse.y: 配列参照の`[]'内が空でもよいことにした．

Tue Jan 24 14:45:15 1995  Yukihiro Matsumoto  (matz@ix-02)

	* class.c(rb_include_module): `-v'を指定した時にはincludeしたモジュー
	  ルとクラス定数が衝突していないかチェックする．

Mon Jan 23 10:42:09 1995  Yukihiro Matsumoto  (matz@ix-02)

	* parse.y(rb_class2name): メタクラスに関するbug fix.

	* dict.c: Dict[..]で辞書の生成が出来るように．

	* array.c: Array[..]で配列の生成が出来るように．

	* parse.y: 辞書の表現として{a,b,..}という形式も許すように．

Fri Jan 20 10:28:38 1995  Yukihiro Matsumoto  (matz@ix-02)

	* re.c(Regexp.quote): 正規表現をエスケープするメソッド．

	* 無駄なrb_intern()を減らした．

	* parse.y: `!', `!=', `!~'を特殊演算子にする．よってこれらは再定義
	  できなくなった．

Wed Jan 18 13:20:41 1995  Yukihiro Matsumoto  (matz@ix-02)

	* parse.y: 文法の整理(unless,untilをなくした)．

Tue Jan 17 11:11:27 1995  Yukihiro Matsumoto  (matz@ix-02)

	* eval.c: defでメソッド再定義時にはスーパークラスのメソッドの可視
	  性を継承する．最初の定義の時は今までと同じデフォルト(トップレベ
	  ルで関数的，クラス定義内で通常メソッド)．

	* object.c(Class::new): オブジェクトの生成時に関数的メ
	  ソッドinit_objectが必ず呼ばれるように変更．

	* eval.c: 未定義のメソッドに対してunknownメソッドが呼ばれるように
	  なった．エラー表示が今までと同じになるようにenvを調節している．

Fri Jan 13 14:40:30 1995  Yukihiro Matsumoto  (matz@ix-02)

	* gc.c: gcを若干書き換えて整理した．が，あまり変化はなかったようだ．

	* parse.y(yylex): symbolを\symから:symに変更した．

Thu Jan 12 01:39:28 1995  Yukihiro Matsumoto  (matz@dyna)

	* eval.c: 新規関数 rb_eval_string()．

	* gc.c: gc_mark()を一部非再帰化．

	* variable.c(rb_ivar_{get,set}): インスタンス変数のアクセス周りで
	  チェックが足りなかった．

	* variable.c: クラス定数とインスタンス変数でハッシュテーブルを共有
	  するようにした．

	* ruby.h: iv_tblをRBasicからRObjectとRClassへ移動した．これにより，
	  ObjectとClass,Moduleしかインスタンス変数を持てなくなる．が，メモ
	  リ効率は若干向上する．

Tue Jan 10 00:58:20 1995  Yukihiro Matsumoto  (matz@dyna)

	* 0.64 released

	* eval.c: レシーバと引数は常にiterではない．

	* cons.c(aref,aset): negative offset対応．

Mon Jan  9 14:40:39 1995  Yukihiro Matsumoto  (matz@ix-02)

	* parse.y: foo{..}の形式において，fooをローカル変数やクラス名では
	  なく，引数なしの関数型メソッド呼び出しとみなすようにした．

	* list.c -> cons.c: 名称変更(クラス名も)．

	* list.c: a::b::c::nilをリスト(a b c)とみなすlisp形式から，a::b::c
	  をリスト(a b c)とみなすruby形式に変更．[], []=, eachもそれに会わ
	  せた仕様とする．

	* list.c: consペアとしての機能を強調．仕様変更．

Sat Jan  7 01:26:26 1995  Yukihiro Matsumoto  (matz@dyna)

	* eval.c: 自己代入の不具合修正．

	* eval.c(masign): 多重代入が配列もリストもとれるようにした．

	* list.c: assocを2要素の配列からList(CONSペア)に変更した．

Fri Jan  6 13:42:12 1995  Yukihiro Matsumoto  (matz@ix-02)

	* parse.y: a[b]+=cやa.b+=cなどの自己代入形式で，aやbを2度評価しな
	  くなった．

	* eval.c: iterator設定のバグフィックス．

	* list.c: Listクラスを新設．

Thu Jan  5 13:55:00 1995  Yukihiro Matsumoto  (matz@ix-02)

	* parse.y: SCOPEのメモリリークをなくした．

	* eval.c: built-inメソッドへの引数の引き渡し方を変更して，配列の生
	  成数を減らした．

	* re.c: match-dataを毎回生成することをやめた．`$~'をアクセスした時
	  にon-demandで生成する．

	* string.c etc: 不必要なmemmoveをmemcpyに置換．

	* parse.y: =~, !~は副作用があるのでコンパイル時に展開できない．

Tue Jan  3 02:04:36 1995  Yukihiro Matsumoto  (matz@dyna)

	* eval.c: rest引数のbug fix.

	* eval.c,gc.c: scopeをオブジェクトにした．

	* eval.c: envとscopeの扱いを変更した．

Wed Dec 28 09:46:57 1994  Yukihiro Matsumoto  (matz@ix-02)

	* parse.y: evalでローカル変数が追加された場合に対応した．

	* parse.y: 演算子を含むaliasのbug fix.

Tue Dec 27 16:45:20 1994  Yukihiro Matsumoto  (matz@ix-02)

	* parse.y: def A Bをalias A Bに変更．

	* eval.c: alias関係のbug修正．nodeをオブジェクト化した時にenbugし
	  たようだ．

	* signal.c: システムコールの再定義を止めた．

	* io.c(select): write/exceptのフラグ設定にバグ．

	* Makefile.in: static link用オプションをMake変数として独立させた．

Tue Dec 20 00:46:19 1994  Yukihiro Matsumoto  (matz@dyna)

	* 0.63 released

	* eval.c(rb_call): superの呼び出しで落ちる．argc, argvの設定を忘れ
	  ていた．

	* parse.y(read_escape): 展開エラー．

	* variable.c: 定義済みの変数のhookを変更しないように．

Mon Dec 19 12:01:10 1994  Yukihiro Matsumoto  (matz@ix-02)

	* parse.y(cond): 条件式に代入式が置かれた場合，`-v'オプションで警
	  告が出るように．

	* parse.y(**): 冪乗演算子`**'の優先順位を単項演算子より高くした．

	* parse.y(and,or): 優先順位の低い演算子`and', `or'.

	* 0.62 released.

	* eval.c: 不必要になったPUSH_ENV, POP_ENVを減らした．

	* env.h: ENVIONからselfをはずした．PUSH_ENVはsuperの準備のためだけ
	  に用いることにした．

	* eval.c: 下記のオブジェクト化で遅くなった実行速度をもとに戻した．

Mon Dec 17 23:01:10 1994  Yukihiro Matsumoto  (matz@ix-02)

	* eval.c: env.{argv,argc}とscope.local_varsのオブジェクト化．

	* eval.c: 1スコープ内で複数Blockを生成したときのバグを修正．

Fri Dec 16 15:52:06 1994  Yukihiro Matsumoto  (matz@ix-02)

	* parse.y: `&&'と`||'の両辺はいつでも条件式とした．

Thu Dec 15 00:16:04 1994  Yukihiro Matsumoto  (matz@dyna)

	* eval.c(Block): Blockオブジェクトを実現．

	* node.h: NODE_QLISTはなくなった．

	* eval.c(rb_call): 引数への代入を名前で一つずつ代入するのをやめて，
	  一度にコピーするようにした．

	* eval.c(rb_call): rubyで記述されたメソッドへの引数渡しをinline化．

	* eval.c: イテレータ判定処理の全面書き換え．不適切なイテレータ呼び
	  出しをなくした．例えば「[foo(),bar()]{i|baz(i)}」でfooもbarもイ
	  テレータとして呼び出され*ない*．

	* eval.c(rb_call): SCOPE処理をinline化．メソッド呼び出しの若干の高
	  速化．

Wed Dec 14 18:09:33 1994  Yukihiro Matsumoto  (matz@ix-02)

	* node.h: nodeもオブジェクトにする．よってGCで回収される．

Thu Dec  8 14:17:29 1994  Yukihiro Matsumoto  (matz@ix-02)

	* 0.60 released - alpha test baseline.
